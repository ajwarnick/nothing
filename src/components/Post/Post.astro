---
import { BlurImage } from '@component/BlurImage';
import { Comment } from '@component/Comment';
import { HeartIcon } from '@component/HeartIcon';
import { CommentIcon } from '@component/CommentIcon';
import { ShareIcon } from '@component/ShareIcon';
import { Carousel } from '@component/Carousel';
import { StoryIcon } from '@component/StoryIcon';
import { Spinner } from '@component/Spinner';

// import { generateDisplayname } from '@util/generateDisplayname';
import { generateUsername } from '@util/generateUsername';
import { getRandTime } from '@util/getRandTime';
import { getRandomInt } from '@util/getRandomInt';
// import { generateString } from '@util/generateString';
import { getHash } from '@util/getHash';
// import { buildParams } from '@util/buildParams';

import './Post.scss';

const generateHashes = (num) => {
  return [...Array(num+1)].map(() => getHash());;
}

const generateImages = () => {
  const coin = getRandomInt(1,2);
  var images;
  if (coin == 1){
    images = [getHash()];
  }else{
    images = generateHashes(getRandomInt(1,3));
  }

  return images;
}

export interface Props {
	userName?: string;
    userAvatar?: string;
    images?: Array<string>;
    likeUsers?: number;
    likeAvatars?: Array<string>;
    comments?: number;
    time?: string;
}

const {
    userName = generateUsername(getRandomInt(1,15)),
    userAvatar = getHash(),
    images = generateImages(), // if multiple this number of images 2-4
    likeUsers = getRandomInt(1,160), // between 1 and 3
    likeAvatars = generateHashes(getRandomInt(1,3)),
    comments = getRandomInt(1,4), // between 1 and 4
    time = getRandTime(),
} = Astro.props as Props
---

<section class="post">
    <div class="post__header">
        <div class="post__header__icon">
          <StoryIcon border={false} hash={userAvatar} />
        </div>
        <div class="post__header__name">
            <a href={ "/user/" +  encodeURI(encodeURIComponent(userAvatar)) }>{ userName }</a>
        </div>
        <div class="post__header__time">
          { time }
        </div>
        <div class="post__header__options"><div></div></div>
    </div>
    <div class="post__image">
      { images.length > 1 ? (
        <Carousel show={1} withIndicator >
          {images.map((x, i) =>
            <div style="width: 100%; aspect-ratio: 4 / 3; margin-bottom:15px;" data-hash={x} >
		        <BlurImage  hash={x}/>
	        </div>
          )}
        </Carousel>
      ) : (
            <div style="width: 100%; aspect-ratio: 4 / 3; margin-bottom:15px;" data-hash={images[0]} >
		        <BlurImage hash={images[0]}/>
	        </div>
      )}
      <div class="post__image__icons">
        <HeartIcon />
        <div class="post__Comments_openComments"><CommentIcon /></div>
        <div class="post__image__bookmark"></div>
        <ShareIcon path={'/post/' + images[0]}/>
      </div>
    </div>
    <div class="post__meta">
        <div class="post__likes">
          {likeAvatars.map((x,i) => 
            <div class="post__likes__circle"><StoryIcon border={false} hash={x} /></div>
          )}
          <div class="post__likes__number">Liked by <span>{"testUser.current"}</span> and <span>{likeUsers} others</span></div>
        </div>
        <div class="post__comments">
            <Comment isSlim />
            <div class='post__Comments_Viewall post__Comments_openComments'>View all { comments } Comments</div>
            <div class='post__comments_comments'>
                <Spinner />
            </div>
        </div>
    </div>
</section>

<script>
    // window.location.hostname

    // class="post__image" onClick={}> double click or tap like

    const openCommentsTriggers = document.querySelectorAll('.post__Comments_openComments');
  
    openCommentsTriggers.forEach((trigger) => {
        trigger.addEventListener('click', () => {
            const parentPost = trigger.closest('.post');
            parentPost.classList.add('comments__open');

            // freeze body
            // !parentPost.classList.contains("comments__open") && 
            if(!parentPost.classList.contains("comments__loaded")){
                
                fetch("/api/comments", {})
                    .then(response => {
                        return response.text()
                    }).then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, "text/html");
                        const spinner = parentPost.querySelector(".spinner");

                        spinner.insertAdjacentHTML(
                            "beforebegin",
                            doc.body.innerHTML,
                        );

                        backInit();
                        parentPost.classList.add('comments__loaded');
                    }).catch(error => {
                        console.error('Failed to fetch page: ', error)
                    })

            }
        });
    });

    const backInit = () => {
        let backIcons = document.querySelectorAll('.backIcon__BackIcon');
        backIcons.forEach((icon) =>{
            icon.addEventListener('click', () => {
                const parentPost = icon.closest('.post');
                parentPost.classList.remove('comments__open');
            })
        })
    }
</script>